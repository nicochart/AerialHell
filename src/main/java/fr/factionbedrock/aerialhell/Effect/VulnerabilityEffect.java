package fr.factionbedrock.aerialhell.Effect;

import com.mojang.blaze3d.matrix.MatrixStack;
import fr.factionbedrock.aerialhell.AerialHell;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.AbstractGui;
import net.minecraft.client.gui.DisplayEffectsScreen;
import net.minecraft.potion.EffectInstance;
import net.minecraft.potion.EffectType;
import net.minecraft.util.ResourceLocation;
import net.minecraftforge.api.distmarker.Dist;
import net.minecraftforge.api.distmarker.OnlyIn;

public class VulnerabilityEffect extends AerialHellEffect
{
    public VulnerabilityEffect(EffectType typeIn, int liquidColorIn) {super(typeIn, liquidColorIn);}

    /*private static final ResourceLocation VULNERABLE_HEART_OVERLEAY = new ResourceLocation(AerialHell.MODID, "textures/gui/vulnerability_hearts.png");

    private static final int HEART_ICON_INDEX = 0;
    private static final int HALF_HEART_ICON_INDEX = 16;
    private static final int MAX_HEARTS = 20;
    private static final int MAX_HALF_HEARTS = 40;
    private static final int MAX_HEARTS_PER_ROW = 10;
    private static final int HEART_ICON_WIDTH = 9;
    private static final int HEART_ICON_HEIGHT = 9;

    @Override @OnlyIn(Dist.CLIENT)
    public void renderHUDEffect(EffectInstance effect, AbstractGui gui, MatrixStack matrixStack, int x, int y, float z, float alpha)
    {
        Minecraft mc = Minecraft.getInstance();
        mc.getTextureManager().bindTexture(VULNERABLE_HEART_OVERLEAY);

        int hearts = (int) mc.player.getHealth() / 2;
        int halfHearts = mc.player.getHealth() % 2 == 0 ? 0 : 1;
        int maxHearts = Math.min(hearts, MAX_HEARTS);
        int maxHalfHearts = Math.min(halfHearts, MAX_HALF_HEARTS - maxHearts * 2);

        for (int i = 0; i < maxHearts; i++)
        {
            int iconX = HEART_ICON_INDEX % MAX_HEARTS_PER_ROW * HEART_ICON_WIDTH;
            int iconY = HEART_ICON_INDEX / MAX_HEARTS_PER_ROW * HEART_ICON_HEIGHT;
            AbstractGui.blit(matrixStack, x + i * HEART_ICON_WIDTH, y, iconX, iconY, HEART_ICON_WIDTH, HEART_ICON_HEIGHT, 9, 9);
        }

        for (int i = 0; i < maxHalfHearts; i++)
        {
            int iconX = HALF_HEART_ICON_INDEX % MAX_HEARTS_PER_ROW * HEART_ICON_WIDTH;
            int iconY = HALF_HEART_ICON_INDEX / MAX_HEARTS_PER_ROW * HEART_ICON_HEIGHT;
            AbstractGui.blit(matrixStack, x + maxHearts * HEART_ICON_WIDTH + i * HEART_ICON_WIDTH / 2, y, iconX, iconY, HEART_ICON_WIDTH / 2, HEART_ICON_HEIGHT, 9, 9);
        }
    }*/


    /*@Override
    public void renderHUDEffect(EffectInstance effect, AbstractGui gui, MatrixStack matrixStack, int x, int y, float z, float alpha)
    {
        Minecraft.getInstance().getTextureManager().bindTexture(VULNERABLE_HEART_OVERLEAY);
        ClientPlayerEntity player = Minecraft.getInstance().player;
        assert player != null;

        float health = player.getHealth() / player.getMaxHealth() * 2f;
        float u = health > 1 ? 19 : 0;
        float v = MathHelper.ceil((health - 1) * 10f) * 9f;
        RenderSystem.setShaderTexture(0, gui.HUD_TEXTURE);
        helper.drawTexture(x, y, u, v, 9, 9);


        // Calcule le nombre de cœurs à afficher en fonction du niveau de l'effet
        int hearts = 10;
        if (effect.getAmplifier() == 0) {
            hearts = 20;
        } else if (effect.getAmplifier() == 1) {
            hearts = 30;
        }

        // Calcule la position de départ des cœurs dans la barre de cœurs
        int startX = matrixStack.getScaledWidth() / 2 - (hearts * 9) / 2;
        int startY = matrixStack.getScaledHeight() - 39;

        // Dessine les cœurs
        for (int i = 0; i < hearts / 2; i++) {
            int heartX = startX + i * 18;
            int heartY = startY;

            // Dessine deux cœurs alignés horizontalement
            gui.getMinecraft().getTextureManager().bindTexture(Gui.ICONS_LOCATION);
            gui.drawTexturedModalRect(heartX, heartY, 0, 9, 9, 9);
            gui.drawTexturedModalRect(heartX + 9, heartY, 9, 9, 9, 9);
        }
    }*/
}